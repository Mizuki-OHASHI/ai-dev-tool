../controller/posts.go
```
package controller

import (
	"encoding/json"
	"main/model"
	"main/usecase"
	"net/http"

	"github.com/gorilla/mux"
)

func GetPosts(w http.ResponseWriter, r *http.Request) {
	posts, err := usecase.GetPosts()
	if err != nil {
		http.Error(w, err.Error(), http.StatusInternalServerError)
		return
	}

	json.NewEncoder(w).Encode(posts)
}

func GetPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	var err error
	id := params["postId"]
	if id == "" {
		http.Error(w, "Empty post ID", http.StatusBadRequest)
		return
	}

	post, err := usecase.GetPost(id)
	if err != nil {
		http.Error(w, err.Error(), http.StatusInternalServerError)
		return
	}

	json.NewEncoder(w).Encode(post)
}

func CreatePost(w http.ResponseWriter, r *http.Request) {
	var post model.Post
	err := json.NewDecoder(r.Body).Decode(&post)
	if err != nil {
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}

	err = usecase.CreatePost(&post)
	if err != nil {
		http.Error(w, err.Error(), http.StatusInternalServerError)
		return
	}

	w.WriteHeader(http.StatusCreated)
	json.NewEncoder(w).Encode(post)
}

func UpdatePost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	var err error
	id := params["postId"]
	if id == "" {
		http.Error(w, "Empty post ID", http.StatusBadRequest)
		return
	}

	var post model.Post
	err = json.NewDecoder(r.Body).Decode(&post)
	if err != nil {
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}

	post.ID = id
	err = usecase.UpdatePost(&post)
	if err != nil {
		http.Error(w, err.Error(), http.StatusInternalServerError)
		return
	}

	json.NewEncoder(w).Encode(post)
}

func DeletePost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	var err error
	id := params["postId"]
	if id == "" {
		http.Error(w, "Empty post ID", http.StatusBadRequest)
		return
	}

	err = usecase.DeletePost(id)
	if err != nil {
		http.Error(w, err.Error(), http.StatusInternalServerError)
		return
	}

	w.WriteHeader(http.StatusNoContent)
}

func GetPostsByUser(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	var err error
	userId := params["userId"]
	if userId == "" {
		http.Error(w, "Empty user ID", http.StatusBadRequest)
		return
	}

	posts, err := usecase.GetPostsByUser(userId)
	if err != nil {
		http.Error(w, err.Error(), http.StatusInternalServerError)
		return
	}

	json.NewEncoder(w).Encode(posts)
}
```

../dao/posts.go
```
package dao

import "main/model"

func GetPosts() ([]model.Post, error) {
	rows, err := Db.Query("SELECT * FROM posts")
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	var posts []model.Post
	for rows.Next() {
		var post model.Post
		if err := rows.Scan(&post.ID, &post.PostedBy, &post.Title, &post.Body, &post.CreatedAt, &post.UpdatedAt); err != nil {
			return nil, err
		}
		posts = append(posts, post)
	}

	return posts, nil
}

func GetPost(id string) (model.Post, error) {
	var post model.Post
	err := Db.QueryRow("SELECT * FROM posts WHERE id = ?", id).Scan(&post.ID, &post.PostedBy, &post.Title, &post.Body, &post.CreatedAt, &post.UpdatedAt)
	if err != nil {
		return model.Post{}, err
	}

	return post, nil
}

func CreatePost(post *model.Post) error {
	_, err := Db.Exec("INSERT INTO posts (id, posted_by, title, body, created_at, updated_at) VALUES (?, ?, ?, ?, NOW(), NOW())", post.ID, post.PostedBy, post.Title, post.Body)
	return err
}

func UpdatePost(post *model.Post) error {
	_, err := Db.Exec("UPDATE posts SET posted_by = ?, title = ?, body = ?, updated_at = NOW() WHERE id = ?", post.PostedBy, post.Title, post.Body, post.ID)
	return err
}

func DeletePost(id string) error {
	_, err := Db.Exec("DELETE FROM posts WHERE id = ?", id)
	return err
}

func GetPostsByUser(userId string) ([]model.Post, error) {
	rows, err := Db.Query("SELECT * FROM posts WHERE posted_by = ?", userId)
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	var posts []model.Post
	for rows.Next() {
		var post model.Post
		if err := rows.Scan(&post.ID, &post.PostedBy, &post.Title, &post.Body, &post.CreatedAt, &post.UpdatedAt); err != nil {
			return nil, err
		}
		posts = append(posts, post)
	}

	return posts, nil
}
```

No new features need to be implemented in the model package as the Post struct is already defined. Therefore, no changes are required in the existing code.

../main.go
```
package main

import (
	"fmt"
	"log"
	"main/controller"
	"main/dao"
	"net/http"
	"os"

	"github.com/gorilla/mux"
	"github.com/joho/godotenv"
)

func main() {
	dao.CloseDBWithSysCall()

	r := mux.NewRouter()
	r.HandleFunc("/users", controller.GetUsers).Methods("GET")
	r.HandleFunc("/users", controller.CreateUser).Methods("POST")
	r.HandleFunc("/users/{userId}", controller.GetUser).Methods("GET")
	r.HandleFunc("/users/{userId}", controller.UpdateUser).Methods("PUT")
	r.HandleFunc("/users/{userId}", controller.DeleteUser).Methods("DELETE")
	r.HandleFunc("/posts", controller.GetPosts).Methods("GET")
	r.HandleFunc("/posts", controller.CreatePost).Methods("POST")
	r.HandleFunc("/posts/{postId}", controller.GetPost).Methods("GET")
	r.HandleFunc("/posts/{postId}", controller.UpdatePost).Methods("PUT")
	r.HandleFunc("/posts/{postId}", controller.DeletePost).Methods("DELETE")
	r.HandleFunc("/users/posts/{userId}", controller.GetPostsByUser).Methods("GET")

	log.Printf("Listening...")

	port := os.Getenv("PORT")
	if port == "" {
		port = "8080"
	}

	if err := http.ListenAndServe(fmt.Sprintf(":%s", port), r); err != nil {
		log.Fatal(err)
	}
}

func init() {

	if err := godotenv.Load(".env"); err != nil {
		log.Printf("fail: godotenv.Load, %v\n", err)
	}

	dao.OpenSql()
}

```

No new features need to be implemented in the schema package as the database schema for the posts table is already defined. Therefore, no changes are required in the existing code.

../usecase/posts.go
```
package usecase

import (
	"main/dao"
	"main/model"
)

func GetPosts() ([]model.Post, error) {
	return dao.GetPosts()
}

func GetPost(id string) (model.Post, error) {
	return dao.GetPost(id)
}

func CreatePost(post *model.Post) error {
	return dao.CreatePost(post)
}

func UpdatePost(post *model.Post) error {
	return dao.UpdatePost(post)
}

func DeletePost(id string) error {
	return dao.DeletePost(id)
}

func GetPostsByUser(userId string) ([]model.Post, error) {
	return dao.GetPostsByUser(userId)
}

```
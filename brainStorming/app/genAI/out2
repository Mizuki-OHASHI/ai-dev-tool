../dao/users.go
```
package dao

import (
	"main/model"
	"errors"
)

func GetUsers() ([]model.User, error) {
	rows, err := Db.Query("SELECT * FROM users")
	if err != nil {
		return nil, errors.New("Failed to fetch users from database")
	}
	defer rows.Close()

	var users []model.User
	for rows.Next() {
		var user model.User
		if err := rows.Scan(&user.ID, &user.Name, &user.Email, &user.Password, &user.CreatedAt, &user.UpdatedAt); err != nil {
			return nil, errors.New("Failed to scan user data")
		}
		users = append(users, user)
	}

	return users, nil
}

func GetUser(id string) (model.User, error) {
	var user model.User
	err := Db.QueryRow("SELECT * FROM users WHERE id = ?", id).Scan(&user.ID, &user.Name, &user.Email, &user.Password, &user.CreatedAt, &user.UpdatedAt)
	if err != nil {
		return model.User{}, errors.New("Failed to fetch user from database")
	}

	return user, nil
}

func CreateUser(user *model.User) error {
	_, err := Db.Exec("INSERT INTO users (id, name, email, password, created_at, updated_at) VALUES (?, ?, ?, ?, NOW(), NOW())", user.ID, user.Name, user.Email, user.Password)
	if err != nil {
		return errors.New("Failed to insert user into database")
	}
	return nil
}

func UpdateUser(user *model.User) error {
	_, err := Db.Exec("UPDATE users SET name = ?, email = ?, password = ?, updated_at = NOW() WHERE id = ?", user.Name, user.Email, user.Password, user.ID)
	if err != nil {
		return errors.New("Failed to update user in database")
	}
	return nil
}

func DeleteUser(id string) error {
	_, err := Db.Exec("DELETE FROM users WHERE id = ?", id)
	if err != nil {
		return errors.New("Failed to delete user from database")
	}
	return nil
}

func IsUsernameExists(username string) (bool, error) {
	var exists bool
	err := Db.QueryRow("SELECT EXISTS(SELECT 1 FROM users WHERE name=?)", username).Scan(&exists)
	if err != nil {
		return false, errors.New("Failed to check if username exists in database")
	}
	return exists, nil
}
```

../usecase/users.go
```
package usecase

import (
	"errors"
	"main/dao"
	"main/model"

	"github.com/google/uuid"
)

func GetUsers() ([]model.User, error) {
	users, err := dao.GetUsers()
	if err != nil {
		return nil, errors.New("Failed to get users")
	}
	return users, nil
}

func GetUser(id string) (model.User, error) {
	user, err := dao.GetUser(id)
	if err != nil {
		return model.User{}, errors.New("Failed to get user")
	}
	return user, nil
}

func CreateUser(user *model.User) error {
	exists, err := dao.IsUsernameExists(user.Name)
	if err != nil {
		return errors.New("Failed to check if username exists")
	}
	if exists {
		return errors.New("Username already exists")
	}

	user.ID = uuid.New().String()
	err = dao.CreateUser(user)
	if err != nil {
		return errors.New("Failed to create user")
	}
	return nil
}

func UpdateUser(user *model.User) error {
	err := dao.UpdateUser(user)
	if err != nil {
		return errors.New("Failed to update user")
	}

	return nil
}

func DeleteUser(id string) error {
	err := dao.DeleteUser(id)
	if err != nil {
		return errors.New("Failed to delete user")
	}
	return nil
}
```

../controller/users.go
```
package controller

import (
	"encoding/json"
	"main/model"
	"main/usecase"
	"net/http"

	"github.com/gorilla/mux"
)

func GetUsers(w http.ResponseWriter, r *http.Request) {
	users, err := usecase.GetUsers()
	if err != nil {
		http.Error(w, err.Error(), http.StatusInternalServerError)
		return
	}

	json.NewEncoder(w).Encode(users)
}

func GetUser(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	id := params["userId"]
	if id == "" {
		http.Error(w, "Invalid user ID", http.StatusBadRequest)
		return
	}

	user, err := usecase.GetUser(id)
	if err != nil {
		http.Error(w, err.Error(), http.StatusInternalServerError)
		return
	}

	json.NewEncoder(w).Encode(user)
}

func CreateUser(w http.ResponseWriter, r *http.Request) {
	var user model.User
	err := json.NewDecoder(r.Body).Decode(&user)
	if err != nil {
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}

	err = usecase.CreateUser(&user)
	if err != nil {
		if err.Error() == "Username already exists" {
			http.Error(w, err.Error(), http.StatusConflict)
		} else {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		}
		return
	}

	w.WriteHeader(http.StatusCreated)
	json.NewEncoder(w).Encode(user)
}

func UpdateUser(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	id := params["userId"]
	if id == "" {
		http.Error(w, "Invalid user ID", http.StatusBadRequest)
		return
	}

	var user model.User
	err := json.NewDecoder(r.Body).Decode(&user)
	if err != nil {
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}

	user.ID = id
	err = usecase.UpdateUser(&user)
	if err != nil {
		http.Error(w, err.Error(), http.StatusInternalServerError)
		return
	}

	json.NewEncoder(w).Encode(user)
}

func DeleteUser(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	id := params["userId"]
	if id == "" {
		http.Error(w, "Invalid user ID", http.StatusBadRequest)
		return
	}

	err := usecase.DeleteUser(id)
	if err != nil {
		http.Error(w, err.Error(), http.StatusInternalServerError)
		return
	}

	w.WriteHeader(http.StatusNoContent)
}
```
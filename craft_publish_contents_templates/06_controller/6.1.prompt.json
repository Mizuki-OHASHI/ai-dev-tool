{
  "model": "gpt-3.5-turbo",
  "messages": [
    {
      "role": "system",
      "content": "You are an AI assistant and always write output of your response in Golang."
    },
    {
      "role": "user",
      "content": "```go\npackage controller\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\n\t\"github.com/Mizuki-OHASHI/my-craft/controller/common\"\n\t\"github.com/Mizuki-OHASHI/my-craft/logger\"\n\t\"github.com/Mizuki-OHASHI/my-craft/model\"\n\tusecase \"github.com/Mizuki-OHASHI/my-craft/usecase\"\n\tgin \"github.com/gin-gonic/gin\"\n)\n\ntype publishcontentstemplates struct {\n\tu usecase.PublishContentsTemplatesUsecase\n\tServerInterface\n}\n\nfunc NewPublishcontentstemplates(u usecase.PublishContentsTemplatesUsecase) ServerInterface {\n\treturn &publishcontentstemplates{u: u}\n}\n```\n\n```go\npackage usecase\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"strings\"\n\n\t\"github.com/Mizuki-OHASHI/my-craft/dao\"\n\t\"github.com/Mizuki-OHASHI/my-craft/dao/listutil\"\n\t\"github.com/Mizuki-OHASHI/my-craft/model\"\n)\n\ntype PublishContentsTemplatesUsecase interface {\n\tList(ctx context.Context, tenantID string, req model.SearchQueryParameters) (model.PublishContentsTemplatesList, int64, bool, error)\n\tFetch(ctx context.Context, tenantID, id string) (*model.PublishContentsTemplates, error)\n\tCreate(ctx context.Context, templates model.PublishContentsTemplates) (string, error)\n\tUpdate(ctx context.Context, templates model.PublishContentsTemplates) (string, error)\n\tDelete(ctx context.Context, tenantID, id string) error\n}\n\ntype publishContentsTemplatesUsecase struct {\n\td dao.PublishContentsTemplatesDao\n}\n\nfunc NewPublishContentsTemplatesUsecase(d dao.PublishContentsTemplatesDao) PublishContentsTemplatesUsecase {\n\treturn &publishContentsTemplatesUsecase{\n\t\td: d,\n\t}\n}\n\nvar ErrNotFoundPublishContentsTemplatesID = fmt.Errorf(\"not found publish contents templates id\")\n\nfunc (u *publishContentsTemplatesUsecase) List(ctx context.Context, tenantID string, req model.SearchQueryParameters) (model.PublishContentsTemplatesList, int64, bool, error) {\n\treq.Filter = append(req.Filter, model.FilterElem{\n\t\tField:    \"tenant_id\",\n\t\tOperator: string(listutil.Equal),\n\t\tValue:    tenantID,\n\t})\n\n\tlist, total, err := u.d.List(ctx, req)\n\tif err != nil {\n\t\treturn nil, 0, false, err\n\t}\n\n\tif len(list) == 0 {\n\t\treturn nil, 0, false, nil\n\t}\n\treturn list, total, false, nil\n}\n\nfunc (u *publishContentsTemplatesUsecase) Fetch(ctx context.Context, tenantID, id string) (*model.PublishContentsTemplates, error) {\n\tresult, err := u.d.Fetch(ctx, tenantID, id)\n\tif err != nil {\n\t\tif strings.Contains(err.Error(), \"Not Found\") {\n\t\t\treturn nil, ErrNotFoundPublishContentsTemplatesID\n\t\t}\n\t\treturn nil, err\n\t}\n\treturn result, err\n}\n\nfunc (u *publishContentsTemplatesUsecase) Create(ctx context.Context, templates model.PublishContentsTemplates) (string, error) {\n\tresult, err := u.d.Create(ctx, templates)\n\treturn result, err\n}\n\nfunc (u *publishContentsTemplatesUsecase) Update(ctx context.Context, templates model.PublishContentsTemplates) (string, error) {\n\tresult, err := u.d.Update(ctx, templates)\n\tif err != nil {\n\t\tif strings.Contains(err.Error(), \"Not Found\") {\n\t\t\treturn \"\", ErrNotFoundPublishContentsTemplatesID\n\t\t}\n\t\treturn \"\", err\n\t}\n\treturn result, nil\n}\n\nfunc (u *publishContentsTemplatesUsecase) Delete(ctx context.Context, tenantID, id string) error {\n\terr := u.d.Delete(ctx, tenantID, id)\n\n\tif err != nil {\n\t\tif strings.Contains(err.Error(), \"Not Found\") {\n\t\t\treturn ErrNotFoundPublishContentsTemplatesID\n\t\t}\n\t\treturn err\n\t}\n\treturn nil\n}\n```\n\n```go\npackage model\n\nimport (\n\t\"time\"\n\n\t\"go.mongodb.org/mongo-driver/bson/primitive\"\n)\n\ntype PublishContentsTemplates struct {\n\tID          primitive.ObjectID `bson:\"_id\"`\n\tTenantID    string             `bson:\"tenant_id\"`\n\tDisplayName string             `bson:\"display_name\"`\n\tChannel     string             `bson:\"channel\"`\n\tCreatedBy   string             `bson:\"created_by\"`\n\tCreatedAt   time.Time          `bson:\"created_at\"`\n\tUpdatedBy   string             `bson:\"updated_by\"`\n\tUpdatedAt   time.Time          `bson:\"updated_at\"`\n\tContents    map[string]any     `bson:\"contents\"`\n\tRemarks     string             `bson:\"remarks\"`\n\tTags        []string           `bson:\"tags\"`\n\tDeletedAt   time.Time          `bson:\"deleted_at\"`\n}\n\ntype PublishContentsTemplatesList = []PublishContentsTemplates\n````\n\nDIRECTION: define `func (c *publishcontentstemplates) DeleteCraftV1PublishContentsTemplatesId(ctx *gin.Context, s1 string)` ar package controller"
    }
  ],
  "temperature": 0.51,
  "max_tokens": 1000,
  "top_p": 1,
  "frequency_penalty": 0,
  "presence_penalty": 0
}

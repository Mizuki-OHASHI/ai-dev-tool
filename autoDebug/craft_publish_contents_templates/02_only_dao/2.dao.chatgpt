package dao

import (
	"context"

	"go.mongodb.org/mongo-driver/bson"
	"go.mongodb.org/mongo-driver/mongo"
	"go.mongodb.org/mongo-driver/mongo/options"

	"your-package-name/infra" // Import the infra package with your actual package name
	"your-package-name/model" // Import the model package with your actual package name
)

type publishContentsTemplatesDao struct {
	db        infra.MongoClientWrapper
	tableName string
}

func NewPublishContentsTemplatesDao(mongo infra.MongoClientWrapper) PublishContentsTemplatesDao {
	return &publishContentsTemplatesDao{
		db:        mongo,
		tableName: "publish_contents_templates",
	}
}

func (dao *publishContentsTemplatesDao) List(ctx context.Context, req model.SearchQueryParameters) (model.PublishContentsTemplatesList, int64, error) {
	// Implement the List method to retrieve a list of templates from MongoDB
	collection := dao.db.Client().Database("your-database-name").Collection(dao.tableName)

	// Define filter and options to perform pagination
	filter := bson.M{"tenant_id": req.TenantID}
	options := options.Find()
	options.SetSkip((req.Page - 1) * req.PageSize)
	options.SetLimit(req.PageSize)

	cur, err := collection.Find(ctx, filter, options)
	if err != nil {
		return nil, 0, err
	}
	defer cur.Close(ctx)

	var templates model.PublishContentsTemplatesList
	for cur.Next(ctx) {
		var tmpl model.PublishContentsTemplates
		if err := cur.Decode(&tmpl); err != nil {
			return nil, 0, err
		}
		templates = append(templates, tmpl)
	}

	// Count total documents for pagination
	total, err := collection.CountDocuments(ctx, filter)
	if err != nil {
		return nil, 0, err
	}

	return templates, total, nil
}

func (dao *publishContentsTemplatesDao) Fetch(ctx context.Context, tenantID, id string) (*model.PublishContentsTemplates, error) {
	// Implement the Fetch method to retrieve a template by its ID from MongoDB
	collection := dao.db.Client().Database("your-database-name").Collection(dao.tableName)

	filter := bson.M{"tenant_id": tenantID, "_id": id}
	var tmpl model.PublishContentsTemplates

	if err := collection.FindOne(ctx, filter).Decode(&tmpl); err != nil {
		if err == mongo.ErrNoDocuments {
			return nil, nil // Template not found
		}
		return nil, err
	}

	return &tmpl, nil
}

func (dao *publishContentsTemplatesDao) Create(ctx context.Context, templates model.PublishContentsTemplates) (string, error) {
	// Implement the Create method to insert a new template into MongoDB
	collection := dao.db.Client().Database("your-database-name").Collection(dao.tableName)

	_, err := collection.InsertOne(ctx, templates)
	if err != nil {
		return "", err
	}

	return templates.ID.Hex(), nil
}

func (dao *publishContentsTemplatesDao) Update(ctx context.Context, templates model.PublishContentsTemplates) (string, error) {
	// Implement the Update method to update an existing template in MongoDB
	collection := dao.db.Client().Database("your-database-name").Collection(dao.tableName)

	filter := bson.M{"tenant_id": templates.TenantID, "_id": templates.ID}
	update := bson.M{
		"$set": bson.M{
			"display_name": templates.DisplayName,
			"channel":      templates.Channel,
			// Add other fields to update here
		},
	}

	_, err := collection.UpdateOne(ctx, filter, update)
	if err != nil {
		return "", err
	}

	return templates.ID.Hex(), nil
}

func (dao *publishContentsTemplatesDao) Delete(ctx context.Context, tenantID, id string) error {
	// Implement the Delete method to delete a template from MongoDB
	collection := dao.db.Client().Database("your-database-name").Collection(dao.tableName)

	filter := bson.M{"tenant_id": tenantID, "_id": id}
	_, err := collection.DeleteOne(ctx, filter)
	return err
}
